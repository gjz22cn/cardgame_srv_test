#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('information:server');
var http = require('http');
var gamesrv = require('gamesrv');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



var net = require('net');
 
var HOST = '0.0.0.0';
var PORT = 4000;
 
var gameServer = net.createServer();
var clientList = [];
 
gameServer.on('connection', function(client){
    client.name = client.remoteAddress + ':' + client.remotePort;
    console.log('connect request from ' + client.name)
 
    client.setTimeout(5*120*1000);
 
    client.write('Hi!\n');
    clientList.push(client);
 
    client.on('data', function(data){
        gamesrv.message_handle(data, client);
    });
 
    client.on('end', function(){
        clientList.splice(clientList.indexOf(client), 1);
    });
 
    client.on('close', function() {
        console.log('close:' + client.name);
    });
 
    client.on('timeout',function(){
        client.end();
    })
 
    client.on('error', function(error) {
        console.log(error);
        connection.end();
    });
});

gameServer.listen(PORT, HOST);
 
console.log('Server listening on ' + HOST +':'+ PORT);




var netc = require('net');

var HOST = 'luqiqianchong.qicp.io';
var PORT = 20079;

var client = new netc.Socket();
client.connect(PORT, HOST, function() {

    console.log('CONNECTED TO: ' + HOST + ':' + PORT);
    // 建立连接后立即向服务器发送数据，服务器将收到这些数据 
    for (var i=0; i<10; i++) {
    client.write('I am Chuck Norris!');
    }

});

// 为客户端添加“data”事件处理函数
// data是服务器发回的数据
client.on('data', function(data) {

    console.log('DATA: ' + data);
    // 完全关闭连接
    client.destroy();

});

// 为客户端添加“close”事件处理函数
client.on('close', function() {
    console.log('Connection closed');
});
